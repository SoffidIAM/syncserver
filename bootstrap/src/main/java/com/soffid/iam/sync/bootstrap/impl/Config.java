package com.soffid.iam.sync.bootstrap.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.Properties;

public class Config {
    public static final String PORT_PROPERTY = "port";
    public static final String LOCAL_PORT_PROPERTY = "localPort";
    public static final String DB_PROPERTY = "db";
	public static final String BACKUPDB_PROPERTY = "backupdb";
	public static final String BACKUP_PASSWORD_PROPERTY = "backuppassword";
	public static final String BACKUPUSER_PROPERTY = "backupuser";
	public static final String PASSWORD_PROPERTY = "password";
	public static final String ROL_PROPERTY = "rol";
	public static final String JAVA_OPT_PROPERTY = "java_opt";
	public static final String USER_PROPERTY = "user";
	public static final String SEYCON_SERVER_STANDBY_PROPERTY = "seycon.server.standby";
	public static final String AUTOUPDATE_PROPERTY = "autoupdate";
	public static final String SERVERLIST_PROPERTY = "serverlist";
	public static final String URL_PROPERTY = "url";
	private static Config theConfig;
    Properties prop = new Properties();

    private Config() throws FileNotFoundException, IOException {
        reload();
    }
    
    static final String []propertiesToMerge = new String [] {
    	ROL_PROPERTY,
    	SERVERLIST_PROPERTY,
    	DB_PROPERTY,
    	PASSWORD_PROPERTY,
    	USER_PROPERTY,
    	BACKUPDB_PROPERTY,
    	BACKUP_PASSWORD_PROPERTY,
    	BACKUPUSER_PROPERTY,
    	JAVA_OPT_PROPERTY,
    	URL_PROPERTY
    };
    
    public void updateFromServer () throws IOException
    {
    	String serverList = getServerList();
    	if (serverList == null)
    		return;
    	for (String server: getServerList().split("[, ]+")) {
    		try {
	    		URL u = new URL(server);
	    		u = new URL (u.getProtocol(), u.getHost(), u.getPort(), "/seycon/boot-config");
	    		InputStream in = HttpConnectionFactory.getConnection(u).getInputStream();
	    		Properties p = new Properties();
	    		p.load(in);
	    		mergeProperties (p);
	    		return;
    		} catch (Exception e) {
    			System.out.print("Error fetching configuration from "+server);
    			e.printStackTrace();
    		}
    	}
    }

    public void mergeProperties (Properties newProp) throws IOException
    {
    	boolean anyChange = false;
    	for (String s: propertiesToMerge)
    	{
    		String value = newProp.getProperty(s);
    		if (value == null) {
    			if (prop.contains(s)) {
    				anyChange = true;
    				prop.remove(s);
    			}
    		}
    		else {
    			if (!value.equals(prop.getProperty(s))) {
    				anyChange = true;
    				prop.setProperty(s, newProp.getProperty(s));
    			}
    		}
    	}
    	if (anyChange)
    		update();
    }

	public void reload() throws IOException, FileNotFoundException
	{
		File config = getConfigFile();
        if (config.canRead()) {
            prop.load(new FileInputStream(config));
        }
	}

    private File getConfigFile() throws IOException {
        return new File(getHomeDir(), "/conf/seycon.properties"); //$NON-NLS-1$
    }

    private void update() throws IOException {
        prop.store(new FileOutputStream(getConfigFile()),
                    "Soffid autogenerated file"); //$NON-NLS-1$
     }

    private File homeDir = null;
    public File getHomeDir() throws IOException {
    	if (homeDir == null)
    	{
    		homeDir = computeHomeDir();
    	}
    	return homeDir;
    }

    private File computeHomeDir() throws IOException {
        URL url = Config.class.getResource("Config.class"); //$NON-NLS-1$
        if ("jar".equals(url.getProtocol())) { //$NON-NLS-1$
            int i = url.getFile().lastIndexOf('!');
            if (i > 0) {
                URL jarFileUrl = new URL(url.getFile().substring(0, i));
                if ("file".equals(jarFileUrl.getProtocol())) { //$NON-NLS-1$
                    String jarURL = jarFileUrl.getFile();
                    jarURL = jarURL.replace("%20", " "); //$NON-NLS-1$ //$NON-NLS-2$
                    File f = new File(jarURL);
                    return f.getParentFile().getParentFile().getCanonicalFile();
                }
            }
        }
        return new File("."); //$NON-NLS-1$
	}
    
    public static Config getConfig() throws FileNotFoundException, IOException {
        if (theConfig == null)
            theConfig = new Config();
        return theConfig;
    }

    public String getServerList() {
    	return prop.getProperty(SERVERLIST_PROPERTY); //$NON-NLS-1$
    }

    public String getJVMOptions() throws RemoteException {
        String properties = prop.getProperty(JAVA_OPT_PROPERTY); //$NON-NLS-1$
        if (properties == null || properties.trim().length() == 0) {
            if (isServer()) {
                properties = "-Xmx512m"; //$NON-NLS-1$
            } else {
                properties = "-Xmx64m"; //$NON-NLS-1$
            }
        }
        return properties;
    }

    public void setServerList(String list) throws IOException {
    	if (list == null)
    		prop.remove(SERVERLIST_PROPERTY);
    	else
    		prop.setProperty(SERVERLIST_PROPERTY, list); //$NON-NLS-1$
        update();
    }

    public String getRole() {
        return prop.getProperty(ROL_PROPERTY); //$NON-NLS-1$
    }

    public boolean isServer() {
        return "server".equals(getRole()); //$NON-NLS-1$
    }

    public boolean isAgent() {
        return "agent".equals(getRole()) || "remote".equals(getRole()); //$NON-NLS-1$
    }

    public boolean isUpdateEnabled() {
        String s = prop.getProperty(AUTOUPDATE_PROPERTY); //$NON-NLS-1$
        if (s == null) {
            prop.setProperty(AUTOUPDATE_PROPERTY, "true"); //$NON-NLS-1$ //$NON-NLS-2$
            try {
                update();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return true;
        }
        return !"false".equals(s); //$NON-NLS-1$
    }

    public void setRole(String list) throws IOException {
        prop.setProperty(ROL_PROPERTY, list); //$NON-NLS-1$
        update();
    }

    public String getDbUser() {
        return prop.getProperty(USER_PROPERTY); //$NON-NLS-1$
    }

    public void setDbUser(String list) throws IOException {
        prop.setProperty(USER_PROPERTY, list); //$NON-NLS-1$
        update();
    }

    public Password getPassword() {
        String s = prop.getProperty(PASSWORD_PROPERTY); //$NON-NLS-1$
        if (s == null)
            return null;
        return Password.decode(s); 
    }

    public void setPassword(Password list) throws IOException {
        prop.setProperty(PASSWORD_PROPERTY, list.toString()); //$NON-NLS-1$
        update();
    }


    public String getDB() {
        return prop.getProperty(DB_PROPERTY); //$NON-NLS-1$
    }

    public void setDB(String list) throws IOException {
        prop.setProperty(DB_PROPERTY, list); //$NON-NLS-1$
        update();
    }

    public Password getSSLKey() {
        String s = prop.getProperty("sslkey"); //$NON-NLS-1$
        if (s == null)
            return null;
        return Password.decode(s);
    }

    public void setSSLKey(Password list) throws IOException {
        prop.setProperty("sslkey", list.toString()); //$NON-NLS-1$
        update();
    }

    public String getHostName() {
        return prop.getProperty("hostname"); //$NON-NLS-1$
    }

    public void setHostName(String list) throws IOException {
    	if ( !list.equals(prop.getProperty("hostname"))) {
	        prop.setProperty("hostname", list); //$NON-NLS-1$
	        update();
    	}
    }

    public String getPort() throws RemoteException {
        return prop.getProperty(PORT_PROPERTY); //$NON-NLS-1$
    }

    public void setPort(String list) throws IOException {
    	if ( !list.equals(prop.getProperty(PORT_PROPERTY))) {
	        prop.setProperty(PORT_PROPERTY, list); //$NON-NLS-1$
	        update();
    	}
    }

    public boolean isRMIEnabled() {

        return "true".equals(prop.getProperty("rmi")); //$NON-NLS-1$ //$NON-NLS-2$
    }

    public boolean isBroadcastListen() {

        return "true".equals(prop.getProperty("broadcast_listen")); //$NON-NLS-1$ //$NON-NLS-2$
    }

    public void setRMIEnabled(boolean enabled) throws IOException {
        prop.setProperty("rmi", Boolean.toString(enabled)); //$NON-NLS-1$
        update();
    }

    private static String FILE_SEPARATOR = File.separator;

    public static boolean hasKeystore() {
        String BASE_DIRECTORY = null;
        try {
            BASE_DIRECTORY = getConfig().getHomeDir().getAbsolutePath();
        } catch (Exception e) {
            return false;
        }
        File file = new File(BASE_DIRECTORY + FILE_SEPARATOR + "conf" //$NON-NLS-1$
                + FILE_SEPARATOR + "keystore.jks"); //$NON-NLS-1$
        return file.exists();
    }

    public boolean canUpdateComponent (String component) {
        if (!isUpdateEnabled())
            return false;
        
        String frozen = prop.getProperty("frozenComponents"); //$NON-NLS-1$
        if (frozen != null) {
            String[] frozenArray = frozen.split("[, ]+"); //$NON-NLS-1$
            for (int i = 0; i < frozenArray.length ; i++)
                if (frozenArray[i].equals(component))
                    return false;
        }
        return true;
    }
    
    public String getRequestId() {
        return prop.getProperty("requestId"); //$NON-NLS-1$
    }
    
    public void setRequestId(String value) throws IOException {
        if (value != null)
            prop.setProperty("requestId", value); //$NON-NLS-1$
        else
            prop.remove("requestId"); //$NON-NLS-1$
        update();
    }

    public File getLogDir() throws IOException {
        File home = getHomeDir();
        File dir;
        if (File.separatorChar == '\\') {
            dir = new File(home, "logs"); //$NON-NLS-1$
            dir.mkdirs();
        } else {
            dir = new File("/var/log/soffid"); //$NON-NLS-1$
            dir.mkdirs();
            if (!dir.canWrite()) {
                dir = new File(home, "logs"); //$NON-NLS-1$
                dir.mkdirs();
            }
        }
        return dir;
    }


    public File getLogFile() throws IOException {
        File dir = getLogDir();
        return new File(dir, "syncserver.log"); //$NON-NLS-1$
    }

	public String getCustomProperty(String string) {
		return prop.getProperty(string);
	}
    
}
